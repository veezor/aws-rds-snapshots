service: aws-rds-snapshots
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: us-east-1 # you can overwrite defaults here
  environment:
      DATABASE_NAME_PATTERN: TAG
      BACKUP_INTERVAL: ${self:custom.backupInterval}
      SOURCE_AWS_REGION: ${self:custom.sourceAwsRegion}
      TARGET_AWS_REGION: ${self:custom.targetAwsRegion}
      AWS_TARGET_KMS_KEY: ${self:custom.awsTargetKmsKey}
      AWS_SOURCE_ACCOUNT: ${self:custom.awsTargetAccount.source}
      AWS_TARGET_ACCOUNT: ${self:custom.awsTargetAccount.target}
      LOG_LEVEL: info

# you can add statements to the Lambda function's IAM Role here
resources:
  Resources:
    sourceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AwsRdsSnapshotsSourceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AwsRdsSnapshotsSourcePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "rds:DescribeDBInstances"
                    - "rds:DescribeDBClusters"
                    - "rds:DescribeDBClusterSnapshots"
                    - "rds:DescribeDBSnapshots"
                    - "rds:AddTagsToResource"
                    - "rds:CreateDBClusterSnapshot"
                    - "rds:CreateDBSnapshot"
                    - "rds:CopyDBClusterSnapshot"
                    - "rds:CopyDBSnapshot"
                    - "rds:ModifyDBClusterSnapshotAttribute"
                    - "rds:ModifyDBSnapshotAttribute"
                    - "rds:DeleteDBClusterSnapshot"
                    - "rds:DeleteDBSnapshot"
                    - "kms:DescribeKey"
                    - "kms:CreateGrant"
                  Resource: [
                    "arn:aws:rds:*:${self:custom.awsTargetAccount.source}:db:*",
                    "arn:aws:rds:*:${self:custom.awsTargetAccount.source}:cluster:*",
                    "arn:aws:rds:*:*:cluster-snapshot:*",
                    "arn:aws:rds:*:*:snapshot:*",
                    "arn:aws:kms:*:${self:custom.awsTargetAccount.source}:key/*"
                    ]
    targetRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AwsRdsSnapshotsTargetRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AwsRdsSnapshotsTargetPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "rds:DescribeDBInstances"
                    - "rds:DescribeDBClusters"
                    - "rds:DescribeDBClusterSnapshots"
                    - "rds:DescribeDBSnapshots"
                    - "rds:AddTagsToResource"
                    - "rds:CreateDBInstance"
                    - "rds:CopyDBClusterSnapshot"
                    - "rds:CopyDBSnapshot"
                    - "rds:ModifyDBCluster"
                    - "rds:ModifyDBInstance"
                    - "rds:ModifyDBClusterSnapshotAttribute"
                    - "rds:ModifyDBSnapshotAttribute"
                    - "rds:DeleteDBClusterSnapshot"
                    - "rds:DeleteDBSnapshot"
                    - "rds:RestoreDBClusterFromSnapshot"
                    - "rds:RestoreDBInstanceFromDBSnapshot"
                    - "rds:DeleteDBCluster"
                    - "rds:DeleteDBInstance"
                    - "kms:DescribeKey"
                    - "kms:CreateGrant"
                  Resource: [
                    "arn:aws:rds:*:${self:custom.awsTargetAccount.target}:db:*",
                    "arn:aws:rds:*:${self:custom.awsTargetAccount.target}:cluster:*",
                    "arn:aws:rds:*:*:cluster-snapshot:*",
                    "arn:aws:rds:*:*:snapshot:*",
                    "arn:aws:rds:*:${self:custom.awsTargetAccount.target}:subgrp:*",
                    "arn:aws:kms:*:${self:custom.awsTargetAccount.target}:key/*"
                    ]

# generate lambda for source account, (stage == source) 
functions:
  lambda_handler_source:
    stages:
      - source
    role: sourceRole
    handler: copy_or_take_snapshots.lambda_handler
    timeout: 60
    events:
      - schedule: cron(0/5 4-7 ? * * *)

# generate lambda for target account, (stage == target)
lambda_handler_target:
    stages:
      - target
    role: targetRole
    handler: restore_snapshots.lambda_handler
    timeout: 60
    events:
      - schedule: cron(0/5 4-7 ? * * *)

custom:
  pythonRequirements:
    useDownloadCache: false
    slim: true
  # Replace with the interval in hours
  backupInterval: 6
  # Replace value with the source region
  sourceAwsRegion: us-east-1
  # Replace value with the target region
  targetAwsRegion: us-west-2
  # Replace value with the target account KMS key
  awsTargetKmsKey: arn:aws:kms:us-east-1:111111111111:key/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee
  # Replace these values with source and target AWS account numbers
  awsTargetAccount:
    source: 222222222222
    target: 111111111111

plugins:
  - serverless-python-requirements
  - serverless-plugin-select
